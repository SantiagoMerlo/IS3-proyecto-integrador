name: Microservice

on:
  push:
    branches: master

jobs:
#############  BUILDING 
  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Docker Login
      env:
        DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: docker login -u $DOCKER_USER -p $DOCKERHUB_PASSWORD
    - uses: actions/checkout@master
    - name: Building
      run: |
        docker build -t santiagomerlo/result:latest ./result
        docker build -t santiagomerlo/vote:latest ./vote
        docker build -t santiagomerlo/worker:latest ./worker
    - name: Pushing 
      run: |
        docker push santiagomerlo/result:latest
        docker push santiagomerlo/vote:latest
        docker push santiagomerlo/worker:latest
############# UNIT TESTING JAVA
############# UNIT TESTING PYTHON
#############  DEPLOY 
  deployWorker:
    name: Delpoy Worker in Heroku
    runs-on: ubuntu-latest
    needs: [docker] # in the future this needs a testing
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.6.8
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: 'is3-worker'
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "worker"
  deployVote:
    name: Delpoy Vote in Heroku
    runs-on: ubuntu-latest
    needs: [deployWorker]
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.6.8
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: 'is3-vote'
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "vote"
  deployResult:
    name: Deploy Result in Heroku
    runs-on: ubuntu-latest
    needs: [deployVote]
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.6.8
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: 'is3-result'
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "result"
  #integrationTest:
  #  name: Test Case
  #  runs-on: ubuntu-latest
  #  needs: [deployResult, deployVote, deployWorker]
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Building
  #    - run: |
  #      cd ./integration-test
  #      npm install
  #    - name: testing
  #    - run: |
  #      npx codeceptjs run --steps
  SonarCloud:
    name: Build
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar 


